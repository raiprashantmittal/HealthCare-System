import React, { useState } from "react";
import Select from "react-select";
import { FaUser, FaEnvelope, FaLock, FaBirthdayCake, FaVenusMars, FaUserShield } from "react-icons/fa";

const roles = [
  { value: "doctor", label: "Doctor" },
  { value: "user", label: "User" },
];

const gender = [
  { value: "male", label: "Male" },
  { value: "female", label: "Female" },
  { value: "other", label: "Other" },
];

const Register = () => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [dob, setDob] = useState("");
  const [selectedGender, setSelectedGender] = useState("");
  const [password, setPassword] = useState("");
  const [selectedRoles, setSelectedRoles] = useState([]);
  const [errors, setErrors] = useState({});

  const validate = () => {
    const newErrors = {};
    if (!name.trim()) newErrors.name = "Name is required";
    if (!email) {
      newErrors.email = "Email is required";
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = "Email is invalid";
    }
    if (!dob) {
      newErrors.dob = "Date of Birth is required";
    } else if (new Date(dob) > new Date()) {
      newErrors.dob = "Date of Birth cannot be in the future";
    }
    if (!selectedGender || selectedGender.length === 0) {
      newErrors.gender = "Gender is required";
    }
    if (!password) {
      newErrors.password = "Password is required";
    } else if (password.length < 6) {
      newErrors.password = "Password must be at least 6 characters";
    }
    if (selectedRoles.length === 0) {
      newErrors.roles = "Please select at least one role";
    }
    return newErrors;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const formErrors = validate();
    setErrors(formErrors);

    if (Object.keys(formErrors).length === 0) {
      console.log("Form Submitted:", {
        name,
        email,
        dob,
        gender: selectedGender.map((g) => g.value),
        password,
        roles: selectedRoles.map((r) => r.value),
      });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 via-white to-blue-200 flex items-center justify-center px-4">
      <form
        onSubmit={handleSubmit}
        className="bg-white p-8 rounded-3xl shadow-xl w-full max-w-md space-y-3"
      >
        <h2 className="text-2xl font-bold text-center text-blue-700">Create Your Account</h2>

        <div className="space-y-1">
          <label className="text-sm font-medium flex items-center gap-2"><FaUser /> Full Name</label>
          <input
            className="border border-gray-300 p-2 w-full rounded-md"
            placeholder="Enter your name"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          {errors.name && <p className="text-red-500 text-xs">{errors.name}</p>}
        </div>

        <div className="space-y-1">
          <label className="text-sm font-medium flex items-center gap-2"><FaEnvelope /> Email</label>
          <input
            className="border border-gray-300 p-2 w-full rounded-md"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          {errors.email && <p className="text-red-500 text-xs">{errors.email}</p>}
        </div>

        <div className="space-y-1">
          <label className="text-sm font-medium flex items-center gap-2"><FaBirthdayCake /> Date of Birth</label>
          <input
            type="date"
            className="border border-gray-300 p-2 w-full rounded-md"
            value={dob}
            onChange={(e) => setDob(e.target.value)}
            max={new Date().toISOString().split("T")[0]}
          />
          {errors.dob && <p className="text-red-500 text-xs">{errors.dob}</p>}
        </div>

        <div className="space-y-1">
          <label className="text-sm font-medium flex items-center gap-2"><FaVenusMars /> Gender</label>
          <Select
            options={gender}
            value={selectedGender}
            onChange={setSelectedGender}
            placeholder="Select Gender"
            className="text-black"
          />
          {errors.gender && <p className="text-red-500 text-xs">{errors.gender}</p>}
        </div>

        <div className="space-y-1">
          <label className="text-sm font-medium flex items-center gap-2"><FaLock /> Password</label>
          <input
            type="password"
            className="border border-gray-300 p-2 w-full rounded-md"
            placeholder="Create a password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          {errors.password && <p className="text-red-500 text-xs">{errors.password}</p>}
        </div>

        <div className="space-y-1">
          <label className="text-sm font-medium flex items-center gap-2"><FaUserShield /> Role(s)</label>
          <Select
            isMulti
            options={roles}
            value={selectedRoles}
            onChange={setSelectedRoles}
            placeholder="Choose role(s)"
            className="text-black"
          />
          {errors.roles && <p className="text-red-500 text-xs">{errors.roles}</p>}
        </div>

        <button
          type="submit"
          className="bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-md w-full font-semibold transition"
        >
          Register
        </button>

        <p className="text-sm text-center">
          Already have an account?{" "}
          <a href="/login" className="text-blue-600 font-medium hover:underline">Login</a>
        </p>
      </form>
    </div>
  );
};

export default Register;
